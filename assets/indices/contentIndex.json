{
  "/": {
    "title": "blog.mauzy.net",
    "content": "\n## whoami\nHello! Online I usually go by Mauzy or Mauzy0x00. I am a Cyber Security student and information technology enthusiast. \n\nI spend most of my time learning something new in this field and I love that there is no end to what you can learn. I love to help others learn something new or accomplish a task so don't hesitate to ask me for help! \n\n## what is this webpage?\nHere I will be writing posts about things I create, setup or hack! These are written mostly for myself and documenation but I hope that they can help someone like you too! These write-ups are written as I complete tasks and I document issues that I ran into\nalong the way. They will not be perfect so if you decide to follow along and see an issue or misconfiguration please let me know! \n\nAlong with technology write-ups I will also include other things like recipies or fixes on my car that are either unconventional or wasn't well documented :)\n\n\n### Socails\n- [Discord](https://discord.com/users/501925286754123796)\n- [Github](https://github.com/settings/profile)\n- [Youtube](https://www.youtube.com/channel/UCuha68UGRSXoh1RFhjNnDpw)\n- Email: mauzy.mail@proton.me\n",
    "lastmodified": "2024-09-24T21:43:36.451333245-04:00",
    "tags": []
  },
  "/miscellaneous-/": {
    "title": "_index",
    "content": "",
    "lastmodified": "2024-09-24T21:43:36.451333245-04:00",
    "tags": []
  },
  "/miscellaneous-/hidden": {
    "title": "hidden",
    "content": "\n# This page is hidden in menu\n\n# Quondam non pater est dignior ille Eurotas\n\n## Latent te facies\n\nLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus,\nfrementes, qui in vel. Hippotades Peleus [pennas\nconscia](http://gratia.net/tot-qua.php) cuiquam Caeneus quas.\n\n- Pater demittere evincitque reddunt\n- Maxime adhuc pressit huc Danaas quid freta\n- Soror ego\n- Luctus linguam saxa ultroque prior Tatiumque inquit\n- Saepe liquitur subita superata dederat Anius sudor\n\n## Cum honorum Latona\n\nO fallor [in sustinui\niussorum](http://www.spectataharundine.org/aquas-relinquit.html) equidem.\nNymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima\niamdudum maius?\n\n    reality(burnDocking(apache_nanometer),\n            pad.property_data_programming.sectorBrowserPpga(dataMask, 37,\n            recycleRup));\n    intellectualVaporwareUser += -5 * 4;\n    traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\n    surge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\n            commerce_add_ppc);\n    if (lun_ipv) {\n        verticalExtranet(1, thumbnail_ttl, 3);\n        bar_graphics_jpeg(chipset - sector_xmp_beta);\n    }\n\n## Fronde cetera dextrae sequens pennis voce muneris\n\nActa cretus diem restet utque; move integer, oscula non inspirat, noctisque\nscelus! Nantemque in suas vobis quamvis, et labori!\n\n    var runtimeDiskCompiler = home - array_ad_software;\n    if (internic \u003e disk) {\n        emoticonLockCron += 37 + bps - 4;\n        wan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\n        simplex -= downloadAccess;\n    }\n    var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\n    sector(memory(firewire + interlaced, wired));",
    "lastmodified": "2024-09-24T21:43:36.451333245-04:00",
    "tags": []
  },
  "/miscellaneous-/recipies/": {
    "title": "_index",
    "content": "\nSome fun recipies I've tried!",
    "lastmodified": "2024-09-24T21:43:36.721333227-04:00",
    "tags": []
  },
  "/miscellaneous-/recipies/Soy-Glazed-Meatloaf/": {
    "title": "_index",
    "content": "With Sesame Roasted Potatoes \u0026 Sauteed Bok Choy (2 servings - 35-45 minutes)\n![Soy Glazed Meatloaf.png](/content/miscellaneous%20/recipies/Soy%20Glazed%20Meatloaf/Soy%20Glazed%20Meatloaf.png)\n# Ingredients:\n- [ ] 10oz Ground Pork (substitute with beef)\n- [ ] 1 Pasture-Raised Egg\n- [ ] 3/4 cup Panko Breadcrumbs\n- [ ] 3/4 lb Potatoes \n- [ ] 2 Cloves Garlic\n- [ ] 10 oz Baby Bok Choy (Three babies)\n- [ ] 2 Scallions (Just 1 is fine)\n- [ ] 1 Tbsp Sesame Oil \n- [ ] 1 Tbsp Rice Vinegar \n- [ ] 2 Tbsps Soy Glaze \n- [ ] 3 Tbsps Cumin-Sichuan Peppercorn Sauce (Substitute with Asian Szechuan sauce)\n# Steps \n## 1. Prepare the ingredients \u0026 make the glaze \n\n- Place an oven rack in the center of the oven; preheat to 450F\n- Wash and dry the fresh produce. \n- Medium dice the **potatoes**.\n- Peel **2 cloves of garlic**; using a zester or the small side of a box grater, finely grade into paste.\n- In a bowl, combine the soy glaze, cumin-Sichuan sauce, and half the vinegar\n## 2. Season the potatoes \n\n- Line a sheet pan with foil.\n- Transfer the **diced potatoes** into a bowl. Drizzle with the **sesame oil** and season with salt and pepper; Toss to coat. Arrange in an even layer on one side of the sheet pan.\n## 3. Roast the meatloaf \u0026 potatoes \n\n- Transfer half the glaze to a separate bowl and set aside for serving.\n- In a bowl, combine the **pork**, **breadcrumbs**, **garlic paste**, and **egg**;  season with salt and pepper. Gently mix to combine.\n- Carefully transfer to the other side of the sheet pan of **seasoned potatoes**.\n- Shape into a tightly packed loaf, about 7 inches by 3 inches.\n- Evenly top the meatloaf with the remaining glaze.\n- Roast 18 to 22 minutes (20 minutes was perfect), or until the potatoes are tender when pierced with a fork and the meatloaf is browned and cooked through (160F)\n- Remove from the oven and let the roasted meatloaf rest at least 2 minutes \n![[Soy-Glazed Meatloaf (prep).png]]\n# 4. Prepare the remaining ingredients \n- Meanwhile, thinly slice the **scallions**, separating the white bottoms and the hollow green tops\n- Cut off and discard the root ends of the **bok choy**; roughly chop, separating the stems and leaves.\n# 5. Cook the bok choy\n- In a medium pan (nonstick), heat a drizzle of **olive oil** on medium-high heat until hot.\n- Add the **chopped bok choy stems** and **sliced white bottoms of the scallions**; season with salt and pepper. Cook, stirring occasionally, 2 to 3 minutes until softened.\n- Add the **chopped bok choy leaves** and **remaining vinegar** (carefully as it may splatter); season with salt and pepper. Cook, stirring frequently, 1 to 2 minutes or until wilted.\n- Turn off the heat \n# 6. Slice the meatloaf \u0026 serve\n- Carefully transfer the **rested meatloaf** to a cutting board and cut along with width into equal-sized pieces.\n- Serve the **sliced meatloaf** with the **roasted potatoes** and cooked **bok choy**. Top the meatloaf with the **reserved glaze**. Garnish with the **sliced green tops of the scallions**.",
    "lastmodified": "2024-09-24T21:43:36.721333227-04:00",
    "tags": []
  },
  "/technology/": {
    "title": "_index",
    "content": "",
    "lastmodified": "2024-09-24T21:43:36.721333227-04:00",
    "tags": []
  },
  "/technology/Grey-Hat-Hacking/": {
    "title": "_index",
    "content": "The Ethical Hacker's Handbook\n# Chapter 1\n\n### Vulnerability Disclosure\n\n- As long as we have humans developing software there will be vulnerabilities. Therefore, as long as we have vulnerabilities, users are at risk.\n- It is therefore incumbent upon security professionals and researchers to prevent, find and fix these vulnerabilities before an attacker takes advantage of them, harming the user. _This is the ultimate mission of the grey hat hacker_\n\n### White Hat Hacking\n\n### Black Hat Hacking\n\n### Grey Hat Hacking\n\n## Know The Enemy: Black Hat Hacking\n\n- [[The Art of War]] Sun Tzu - \"If you know the enemy and know yourself, you need not fear the result of a hundred battles. If you know yourself but not the enemy, for every victory gained you will also suffer a defeat.\"\n\n### Advance Persistent Threats (APTs)\n\n- Use of advance forms of attack and they are persistent in nature.\n    \n    - Significant threat to the enterprise.\n### Lockheed Martin Cyber Kill Chain\n\n- A model to detail the persistent nature of APTs developed by Lockheed Martin in 2011.\n\n![CyberKillChain.png](/static/CyberKillChain.png)\n\n - This model also describes the cost to remediate the further along the attacker gets.\n - Extension of the DoD targeting doctrine, using intelligence which gives indicators of enemy behavior. \n\t - In other words this shows common patterns of attackers \n## MITRE ATT\u0026CK Framework \n- Goes deeper than the Cyber Kill Chain and allows us to get to tactics, techniques and procedures (TTP) of the attacker.\n#### Cyber Threat Emulation (CTE)\n- Once you know how the adversary acts, you can emulate their TTP and determine if your systems are secure \n# Chapter 2\nProgramming Survival Skills\n## C programming language \n- `strcpy` - The most dangerous functions used in C.\n\t- This is dangerous because there are no checks on the size of the input and can lead to a [[Buffer Overflow]]. \n- `strncpy` - The safer alternative,  has a `\u003cwidth\u003e` parameter to ensure only a certain number of characters are copied from the source string to the destination string \n\n###### Compiling with GCC\n\n| Option                         | Description                                                                                                               |\n| ------------------------------ | ------------------------------------------------------------------------------------------------------------------------- |\n| `-o \u003cfilename\u003e`                | Saves the compiled binary with this name.                                                                                 |\n| `-S`                           | Produces a file containing assembly instructions saved with an .s file extension                                          |\n| `-ggdb`                        | Produces extra debugging information; Useful when using GNU debugger (gdb)                                                |\n| `-c`                           | Compiles without linking; produces object files with an .o exention                                                       |\n| `-mpreferred-stack-boundary=2` | Compiles the program using a DWORD size stack, simplifying the debugging process while you learn                          |\n| `fno-stack-protector`          | Disables the stack protection; introduces with GCC 4.1. This option is useful when you're learning about buffer overflows |\n| `-z execstack`                 | Enables an executable stack. This option is useful when you're learning about buffer overflows                            |\n## Computer Memory\n- Bit \n- Nibble - 4 bits\n- Byte - 8 bits\n- Word - 2 bytes\n- DWORD - 2 Words \n- QWORD - 4 Words \n### Random Access Memory (RAM)\n- Any piece of stored data can be retrieved at any time. Thus the term *random access*. \n- With Intel/AMD, the memory is 32-bit or 48-bit addressable.\n\t- This means that the address bus the processor uses to select a particular memory address is 32 or 48 bits wide.\n\t- Therefore, an x86 processor the most memory that can be addressed is 256 Terabytes \n\t- On x64 addressing can be expanded but 256TB has been sufficient. \n### Endian\n- The order of bytes written into memory first\n- Big-Endian - High order of bytes are written first (Motorolla)\n- Little-Endian - Low order of bytes are written first (Intel)\n### Segmentation of Memory \n- Each process needs to have access to memory and you don't want different processes overwriting a memory location of another process or task.\n\t(Critical Seciton)\n- We segment memory to get around this. \n- Registers are used to store and keep track of the current segments a process maintains. \n- Offset registers are used to keep track of where in the segment the critical pieces of data are kept. \n- Each process running gets its own virtual address space and the amount of space depends on the system architecture, system settings and the OS.\n- For example: A 32-bit Windows process is by default allocated 4GB.\n\t- 2Gb assigned to the user-mode \n\t- 2Gb assigned to the kernel-mode\n- Only a small portion of the virtual space is mapped to physical memory \n#### Programs in Memory\n- When processes are put loaded into memory they are broken into different sections. \n##### 6 main sections\n- **.text**\n\t- Code section\n\t- Contains machine instructions \n\t- Marked as readable and executable\n\t- Size is fixed at runtime and will cause an access violation if a write attempt is made\n- **.data**\n\t- Store global initialized variables\n\t- Marked as readable\n\t- Size is fixed at runtime\n- **.bss**\n\t- \"Below Stack Section\"\n\t- Store specific types of global uninitialized variables\n\t- Size is fixed at runtime \n\t- Readable, not writable\n- **Heap**\n\t- Store dynamically allocated variables. \n\t- Grows from lower-addressed memory to higher-addressed memory \n\t- `malloc()`, `realloc()`, `free()`\n\t- Readable, writable, not executable \n\t\t- Not executable because if an attacker gains control of a process then shellcode execution could easily be run in this region\n- **Stack**\n\t- Recursively track function calls \n\t- Stores local variables \n\t- Grows from higher-addressed memory to lower-addressed memory \n\t- A multi-threaded application has a unique stack for each thread\n- **Environment/Arguments**\n\t- Stores a copy of system-level variables that may be required by the process during runtime\n\t- Command-line arguments stored here\n\t- ie. shell name, path, hostname\n\t- Writeable which allows its use in format string and [[Buffer Overflow]] exploits\nThe memory space of a process looks like this:\n![[program memory sections.png]]\n#### Buffers\n- A place to receive and hold data until it is handled by a process \n- Fixed length declared in .data or .bss\n#### Strings \n- Continuous arrays of character data in memory \n- Referenced in memory by the address of the first character \n- Terminated with a null character (\\\\0) in C\n- '\\\\0' is an example of an escape character such as \\\\n (newline) and \\\\r (return)\n#### Pointers \n- Special pieces of memory that hold the address of another piece of memory \n- Used because moving data around registers is slow. It is faster to pass pointers or locations of data in memory \n- Stored in 4 or 8 bytes of contiguous memory depending on whether the application is 32 or 64-bit. \n- Example:\n\t```\n\tint *pointer;\n\tprintf(\"%d\", *pointer)\n\t```\n\t- * is used to dereference the pointer, pointer, and display the value \n## Intel Processors \n(page 36)\n### [[NASM Cheat Sheet#Registers]]\n\n## Python Survival Skills\n\n--- \n# Chapter 11\npage 219\n## Advanced Linux Exploits\n--- \n# Chapter 12 \npage 233\n## Linux Kernel Exploits \n### The Linux Kernel\n- Exploitation of the kernel follows the same principles as with user-space memory corruption bugs and its uncontrained access to memory and other resources provide attackers with unlimited power over affected systems. \n- These bugs can be found on kernel modules, drivers, system calls and other memory management implementation.\n### Environment Setup \n- Qemu, Linux Kernel 5.14.17 and a simple kernel module that has bee deliberately made vulnerable to demonstrate the process of bypassing multiple Linux kernel runtime and compile-time exploit mitigation. \n\n---\n# Chapter 14\npage 281\n## [[Windows Kernel Exploitation]] \n\n### The Windows Kernel \n- The kernel is implemented as the kernel layer, the executive layer and drivers.\n- The kernel and executive layers are implemented in the kernel image, ntoskrnl.exe\n- **Kernel Layer**\n\t- Contains code for thread scheduling, locking, synchronization and basic kernel object management \n- **Executive Layer**\n\t- Contains code for security enforcement, object management, memory management, logging, and Windows Management Instrumentation, among other things. \n- **Kernel Drivers**\n\t- Most kernel drivers are .sys files, but a few kernel components are DLLs (ie, hall.dll, ci.dll)\n\t- A .sys file is a **Portable Executable** file just like an EXE or DLL\n\t![[General Architecture of Windows.png]]\n\t- **User-mode**\n\t\t- Run on top of the Windows Subsystem (kernel32.dll, user32.dll etc), are built for the native API directly (ntdll.dll and win32u.dll), or are run as minimal/pico processes and talk directly to the System Service Dispatcher (AKA system call handler) which takes requests from user mode and dispatches them to the kernel.\n\t- Crossing the line between User-mode and Kernel-mode there is a jump in addresses. Memory is segmented like this due to historical and processor-specific reasons. It just so happens there are two distinct canonical memory spaces with a large non-canonical gap in the middle to divide memory belonging to kernel space (ring 0) and user space (ring 3).\n\t- Some drivers like graphics might talk directly to hardware while others use the **Hardware Abstraction Layer** (HAL). The HAL is an architecture- and platform-agnostic library for interacting with hardware. Recent versions of windows 10 (20H1+) implement the HAL inside of the kernel image and hal.dll is just a forwarding DLL that is still around for compatibility.\n### Kernel Drivers\n- Extensions to the kernel that can help the system:\n\t- Interact with previously unknown devices or file systems\n\t- Provide an interface for kernel introspection to user mode \n\t- Modify how the kernel functions \n\t\t- Heavily discouraged by Microsoft. MS introduced Kernel Patch Protection (AKA PatchGaurd) to prevent developers from tampering with core system routines and data structures. \n- Boot drivers\n\t- Loaded at boot by the bootloader\n- Other drivers are loaded by service manager post boot \n- Only admins or users with *SeLoadDriverPrivilege* can load drivers on a Windows System\n- Microsoft does not consider the boundary between sys admin and the kernel a security boundary since admins can load (nearly) arbitrary drivers anyway.\n\t- Drivers must have an acceptable digital signature in order to be loaded since kernel-mode code signing (KMCS) is enforced by default on all 64-bit machines.\n##### Driver functions\n- Can provide I/O routines in the form of *major functions*\n- Windows Driver Kit (WDK) defines 28 major functions such as:\n\t1. Create\n\t2. Close \n\t3. Power \n\t4. I/O control\n\t5. Read \n\t6. Write \n\t7. Query Information \n\t8. Set Information \n\t9. Shutdown\n\t\n\t- These are constant integer values defined in the WDK headers\n\t- Major function's symbol names begin with `IRP_MJ_` and are indices into the major function array of the `_Driver_Object` starting at 0x70.\n\t- Major function handlers are also called driver dispatch routines and have the following protoype:\n\t\t```\n\t\tNTSTATUS DriverDispatch(\n\t\t\t_DEVICE_OBJECT *DeviceObject,\n\t\t\t_IRP *Irp\n\t\t)\n\t\t```\n\n- Handlers for each major function are set inside of a driver's `_Driver_Object` structure when the driver is initialized.\n\t- The `_Driver_Object` structure contains information about the driver \n\t\t- Name of the driver \n\t\t- Linked list of devices associated with the driver \n\t\t- Optional unload routine \n\t\t\t- Called when 'driver unload' is requested\n\t\t- Memory bounds of the driver (start and size)\n- A driver can create other associated `_Driver_Object` structures \n\t- These represent a device that the caller driver is responsible for \n\t\t- These devices cannot be backed by hardware \n\t\t- An example of a driver not backed by hardware is Sysinternal Process Explorer.\n\t\t\t- Process Explorer is a Microsoft signed driver that is loaded when the tool starts and user-mode APIs are used to communicate with it. The driver then creates a user mode accessible device object and services requests from user mode via the I/O system in the kernel. Finally, the kernel's I/O system dispatches requests to the major function handler routine which is defined in the `_Driver_Object` the device belongs. \n##### Driver I/O\n- **I/O Request Packet (IRP)**\n\t- Describes an I/O request to the device and has many fields\n\t- Notable fields:\n\t\t- `AssociatedIrp.SystemBuffer\n\t\t\t- Often includes and/or output buffer for the request\n\t\t- `Tail.Overlay.CurrentStackLocation\n\t\t\t- Information about the request relevant to the specific device being called. \n\t\t\t- Important information in the `CurrentStackLocation` (IO_STACK_LOCATION) includes:\n\t\t\t\t- `MajorFunction` : current major function being requested.\n\t\t\t\t- `Parameters` : A massive union that contains different information depending on the major function being called.\n- With device I/O control the `MajorFunction` will be `IRP_MJ_DEVICE_CONTROL` (14)\n\t- The `Parameters` field will describe the I/O Control (IOCTL) code being called as well as the input and output buffer sizes.\n\t- The input and output buffer will be in the `AssociatedIrp.SystemBuffer` field of the `_IRP` for most IOCTL calls.\n\t\t[IOCTL codes](https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/defining-i-o-control-codes)\n\n- Example request:\n![[IO request.png]]\n1. The subsystem calls an I/O system service to open a named file.\n    \n2. The I/O manager calls the object manager to look up the named file and to help it resolve any symbolic links for the file object. It also calls the security reference monitor to check that the subsystem has the correct access rights to open that file object.\n    \n3. If the volume is not yet mounted, the I/O manager suspends the open request temporarily and calls one or more file systems until one of them recognizes the file object as something it has stored on one of the mass-storage devices the file system uses. When the file system has mounted the volume, the I/O manager resumes the request.\n    \n4. The I/O manager allocates memory for and initializes an IRP for the open request. To drivers, an open is equivalent to a \"create\" request.\n    \n5. The I/O manager calls the file system driver, passing it the IRP. The file system driver accesses its I/O stack location in the IRP to determine what operation it must carry out, checks parameters, determines if the requested file is in cache, and, if not, sets up the next-lower driver's I/O stack location in the IRP.\n    \n6. Both drivers process the IRP and complete the requested I/O operation, calling kernel-mode support routines supplied by the I/O manager and by other system components (not shown in the previous figure).\n    \n7. The drivers return the IRP to the I/O manager with the I/O status block set in the IRP to indicate whether the requested operation succeeded or why it failed.\n    \n8. The I/O manager gets the I/O status from the IRP, so it can return status information through the protected subsystem to the original caller.\n    \n9. The I/O manager frees the completed IRP.\n    \n10. The I/O manager returns a handle for the file object to the subsystem if the open operation was successful. If there was an error, it returns appropriate status to the subsystem.\n\n### Kernel Debugging\n- A user-land (ring 3) debugger is only capable of debugging individual programs that run on top of the kernel. \n- A kernel-land (ring 0) debugger is required to debug the kernel. \n- Kernel debugging is usually done between two systems\n\t\t1. System running the debugger\n\t\t2. System being debugged \n\t- Two systems are needed because unlike in a ring 3 debugger where a single program is suspended, stopping the whole kernel would prevent you from interacting with the system to run commands or resume it.\n\t- One exception to this is known as \"local\" kernel debugging\n\t\t- This allows the convenience of debugging the currently running system's kernel \n\t\t- Drawbacks of this kind of debugging:\n\t\t\t- You cannot halt the running system. This means you can't set or inject any breakpoints or debug on a crash. \n\t\t\t- Values in memory might be changing rapidly\n- WinDBG is the only officially supported (and thus recommended) ring0 debugger for Windows. \n\t- Offers many different transports over which to debug the kernel \n\t- Network debugging is the most reliable, efficient and consistent setup for kernel debugging. \n## Lab 14-1: Setting Up Kernel Debugging\n### Debugee\n- As admin, run `bcdedit.exe /debug on`\n- As admin, run `bcdedit.exe /dbgsettings net hostip:1.1.1.1 port:50000`\n- Take note of your generated key and local ip address \n- Reboot to enter debug mode\n### Debugger \n- Open WinDBG\n- File \u003e Attach to kernel\n- Enter the port, key and IP address\n- Once connected, hit 'Break'. Prompt should become active at breakpoint (int 3) that is at a kernel address starting with `0xfffff`\n## Lab 14-3: Reverse Engineering the Driver \n- When searching for vulnerabilities in compiled programs it is good practice to start looking for function calls that manipulate memory \n\t- `strcpy`, `memcpy`, `memmove`\n- Open cross-references to the `memmove` function (x key in IDA)\n\t- Review each and trace the arguments (rcx, rdx, r8)\n\t- See if any can be controlled. \n\t- Keep in mind that `_IRP-\u003eAssociatedIrp.SystemBuffer` and `_IO_STACK_LOCATION-\u003eParameters.DeviceIoControl` structures are directly controllable from usermode.\n\t- Also keep in mind that `System Buffer` and `InputBufferSize` were moved into `DeviceExtension` at offsets 0 and 8 respectively.\n\t- We can look for positions where we can manipulate data. This is easier when we see jumps and tests comparisons\n- Note the `memmove` call in `sub_15294`\n\t- Locate which values are passed into the parameters for `memmove` by tracing back in the program. This way we can determine where the parameter values originate\n- We now know that:\n\t- rax : from rbx+0x10\n\t- r9 : from rbx \n\t- rcx : from rdi in the major function handler\n- We determined earlier that rdi holds a pointer to `DeviceExtension` which holds a pointer to `SystemBuffer` (a user input buffer!) at offset 0 and the size of the user input buffer at offset 8\n\t- This means that r9 in sub\\_15294 is a pointer to the input buffer which should give us control of at least the source/destination *and* the size of the call to `memmove`\n\n- Next, we need to figure out how to reach this code path.\n\t- We look for which IOCTL codes lead to he preceding block. We see two: \n\t\t- One zeros out edx \n\t\t- One moves 1 into dl\n\t- Remember that in `sub_15294`:`loc_152E1` there is the test of dl which determines if we use the pointer from r9 as the source or the destination of the `memmove` call.\n\t- Tracing up the two, we see the two IOCTL codes:\n\t\t- `mov dl,1`:\n\t\t![[Pasted image 20240814013758.png]]\n\t\t- `xor edx,edx`\n\t\t![[Pasted image 20240814013851.png]]\n## Lab 14-4: Interacting with the Driver\n- Attach kernel debugger and get the offset of the `memmove` function.\n\t- In IDA, we can calculate the offset by having our cursor on the function and  running `get_screen_ea() - get_imagebase()`\n\t- Note: Offset=  \\\u003cfunction\u003e - \\\u003cimagebase\u003e\n\t- in this case IDA returns 5301h which is ofc `0x5301`\n\t\t- Image base: `0x10000` Function: `0x15301\n- Set a breakpoint on the function in WinDBG\n\t- Issue the `bp` command with the driver name and relative offset\n\t\t- `bp dbutil_2_3+0x5301`\n\t\t- use `.reload` if windbg is angry abt resolving that bp\n\n### The Code\n- Written in Rust: https://github.com/Mauzy0x00/dbutil_2_3-Exploit\n- Try hitting the breakpoint\n\t- run `cargo --bin iocltcall 0x9B0C1EC4 112233445566778899101112131415161718192021222324`",
    "lastmodified": "2024-09-24T22:48:35.481047341-04:00",
    "tags": []
  },
  "/technology/Linux/": {
    "title": "_index",
    "content": "",
    "lastmodified": "2024-09-24T22:48:35.481047341-04:00",
    "tags": []
  },
  "/technology/Linux/Arch-Linux-Journal/": {
    "title": "_index",
    "content": "A record of issues and changes on my Arch Linux installation\n## Screen freezing, shuddering, turning off \n(9/8/23)\n#### Description  \n   Since updating using `pacman -Syu` a few days ago I observed the screen freezes, glitches, and will get worse over time. it begins to go black with a RGB matrix across the top of the screen.  \n#### Investigation  \n1. journalctl -xe  \n   1. Unit: 'kernal' Message: 'ACPI Error: No handler for Region \\[RTCM]'\n       Forums say it is safe to ignore this error.     \n   2. Unit: 'kwin_x11' Message: 'kwin_core: XCB error: 152 (BadDamage), ... ma\u003e  \n       Forums seem to indicate that this is more for development purposes. Whe\u003e  \n2. pacman -Qdt  \n   There was one orphaned package lua52 (5.2.4-5). Will wait to see if that re\u003e  \n   ! This seems to have solved the issue... (9/9/23)  \n   [[Pacman |pacman -Qdt]] Solved this issue\n   #pacman\n## Password Lockout \n(9/9/23)\n#### Description\n   Because I type very quickly I often input my password incorrectly doing so 3 times will lock me out for 5 minutes. This hurts productivity. I want to remove the lock out.\n#### PAM and Security\n   pam_faillock.so is enabled by default. (deny = 0 will disable lock)\n\t   Values in /etc/security/faillock.conf changed \n\t   1. unlock_time = 300 \n\t   2. deny = 5\n\n\n## Added user Mauzy to group libvert \n(9/9/23)\n   This was done so that a password was not required to set up the libvirt network each time a VM was started.\n   `sudo gpasswd -a mauzy libvirt`\n\n## Installed KDE wallpaper-engine\n(9/14/23)\n   Follow Github instructions. Download wallpaper engine from steam using the compatibility setting.\n   - It did not work out of the box switching the video backend to 'Mpv' made it work as deisred\n(9/20/23)\n\tScenes and other types are non-functional\n    - `qmake-qt5 -query QT_INSTALL_QML`\n\t    - this gives the output:\n\t        `QT_INSTALL_QML`\n\t\t\t`/usr/lib/qt/qml`\n\t\t- Moving libWallpaperEngineKde.so and qmldir to that directory\n\t\t\t- `mauzy@Silence ~/Programs/wallpaper-engine-kde-plugin/build/src $ sudo mv libWallpaperEngineKde.so /usr/lib/qt/qml`\n\t\t\t- `sudo mv qmldir /usr/lib/qt/qml`\n\t\t\t- restart kde\n\t\t\t- nope\n\t\t\t- removing file at dir /usr/lib/qt/qml/com/github/catsout/wallpaperEngineKde/libWallpaperEngineKde.so\n\t\t\t\t- caused:![[Pasted image 20230920233828.png]]\n\t\t\t\t- Copied the .so plug in file back into the dir\n\t\t\t- Removing `~/.config/plasma-org.kde.plasma.desktop-appletsrc`\n\t\t\t\t- No change, rebooting\n\t\t\t\t- That borked all of my kde settings and now my steam wallpaper library isnt there... lol. remember to see what a file is before deleting...\n\tDeleting plug-in\n## Wifi dropping \n(9/23/23)\nwlp0s20f3: CTRL-EVENT-SIGNAL-CHANGE above=1 signal=-50 noise=9999 txrate=245000\nList running services \n- systemctl list-units --type service --no-pager\nNot sure what this does exactly but it does something\n- journal -f\n\n## Installed zsh\n(29 Sep 2023)\n- `chsh -s $(which zsh)`\n- WOW this is so much cooler \n- Installed Oh My Zsh for configs and theme management \n\n## QEMU/KVM\n(30 sept 2023)\n- My root partition was full and noticed that virt manager created my kali qcow2 in my root partition. I moved the .qcow2 file into my home partition and changed the virtmanager settings. Upon doing that there was still an error and something in the xml was still looking in /var/lib/libvirt/images/kali-linux.qcow2. Going to /etc/libvirt something something I tried to edit the kali-linux.xml with nvim. the header of the file said it was automatically generated and should be edited with virsh edit. Idk how to use this thing ...\n- Okay so it's using vim but has no indication of that so it was difficult since im just learning vim. anyway... I changed the path that it looks for to the path that i moved the .qcow2 file\n- no bueno... \n---\n## Adding a network bridge for QEMU VM\n\n1. `sudo virsh net-start default`\n\nhttps://wiki.archlinux.org/title/QEMU#Bridged_networking_using_qemu-bridge-helper\nsooo.. looks like virt-manager made its own bridge n everything.\nMaybe just because i didn't have bridge-utils it didn't work.....\n\n\n1. Install the bridge utils \n\tNote: bridges are not allowed on the hardened kernel. It will break your system.\n\t- `yay -S bridge-utils`\n\t\n2. Create and start your bridge\n\t- `ip link add name br0 type bridge`\n\t- `ip link set dev br0 up`\n\t\n3. Create the qemu directory in `etc` if it is not there and add your new bridge to the bridge.conf to allow it.\n\t- `! -d /etc/qemu \u0026\u0026 mkdir /etc/qemu\n\t- `echo allow br0 \u003e /etc/qemu/bridge.conf\n\tNote: make sure /etc/qemu has permissions 755\n\t\n4. Only one of the following is needed: \n- `sysctl net.ipv4.ip_forward=1\n- `sysctl net.ipv6.conf.default.forwarding=1\n- `sysctl net.ipv6.conf.all.forwarding=1\n\tView current settings saved in kernel memory with `sysctl -a` and grep net.ipv\n\t\n5. Use the qemu bridge helper to configure the bridge:\n\t\t`qemu-system-x86_64 -nic bridge,br=_br0_,model=virtio-net-pci`\n\n---\n## BurpSuite and Java\n- Burpsuite not starting\n\t- `Unrecognized option: --add-opens=java.base/java.lang=ALL-UNNAMED \n\t- `Error: Could not create the Java Virtual Machine.`\n- Java \n- archlinux-java is a cli tool \n- `archlinux-java status \n\t`Available Java environments:\n\t  `java-21-openjdk\n\t `java-8-openjdk/jre (default)`\n\t- Because the default is java 8 and jre this error is occurring\n- Use `sudo archlinux-java set java-21-openjdk` to change the default\n- Burp will now start\n## Hyprland XWayland Applications \n- Applications like obsidian discord and spotify are blurry\n- Create the electron25-flags.conf file and insert the following lines. This fixes obsidian but not discord and spotify \n```\ncat electron25-flags.conf\n--enable-features=WaylandWindowDecorations \n--ozone-platform-hint=auto\n```\n- Hypr.conf and insert the following\n```\n# unscale XWayland\nxwayland {\n  force_zero_scaling = true\n}\n\n# toolkit-specific scale\nenv = GDK_SCALE,2\nenv = XCURSOR_SIZE,32\n```\n- Display issue with bottom of screen. Looks like part of the screen is missing\n- Adding `monitor = ,highres,auto,1.4` 1.4 scale fixed the issue. \n\t- Note, scale needs to be easily divisible cannot be an odd number\n\t- On hyprdots. Changing theme and wallpaper throws an error that 1.4 is not divisible \n\n# Alpha Network Adapter \n- Install driver for Realtek Semiconductor Corp. **RTL8812AU** 802.11a/b/g/n/ac 2T2R DB WLAN Adapter\n\t- [rtl8812au-dkms-git (AUR)](https://aur.archlinux.org/packages/rtl8812au-dkms-git/) \n\t\t- This driver did not show the dongle under `ip link`\n\t\t- Uninstalled\n- Make sure driver module loads on system boot (e.g. create file `/etc/modules_load.d/alfa-wifi-dongle.conf` with just one line: `8812au`, if that is the name of installed driver.).\n\n## Hyprland power consumption\n- Laptop having noticeably shorter battery life. \n- According to github. the border angle animation increases power consumption greatly. \n- https://github.com/prasanthrangan/hyprdots/issues/641\n- use `Hyprdots power save -ba` to disable border angle animations\n- `sudo powertop --html=report.html`\n# VSCode and Github \n- An OS keyring couldn't be identified for storing the encryption related data in your current desktop environment\n- https://code.visualstudio.com/docs/editor/settings-sync#_troubleshooting-keychain-issues\n### Solution\n`code --password-store=\"kwallet5\"`\n- If that works, make the value persist:\n\t- Open the command pallet (CTRL+SHIFT+P)\n\t- Run the Preferences: Configure Runtime Arguments\n\t\t- \"password-store\": \"kwallet5\" in argv.json\n--- \n## yay + pacman cache\n- Yay, specifically electron26, is taking up a ton of space in .cache.\n- yay and pacman cache source code and binaries here after updates. These files must be handled by the user. \n\n",
    "lastmodified": "2024-09-24T22:48:35.481047341-04:00",
    "tags": []
  },
  "/technology/Linux/General-Knowledge/": {
    "title": "_index",
    "content": "# Unix \nUnix is a proprietary operating system that was developed in the 1970s by AT\u0026T Bell Labs. It is mainly used for enterprise-level servers and workstations, and has many variants such as AIS, BSD, Iris, and HP-UX. Unix has a graphical user interface (GUI) similar to Windows, but can also use other GUIs such as Gnome. Unix supports multiple users and multitasking, and was the platform for building the internet and the world wide web. [Unix requires a license to use and is not open-source](https://www.coursera.org/articles/unix-vs-linux)\n\n# Linux\nLinux is a free and open-source operating system that was developed in the 1990s by Linus Torvalds as an alternative to Unix. It is widely used on both enterprise and personal computers, and has many versions such as Ubuntu, Debian, Solaris, and Redhat. Linux has many GUI options, such as Gnome, KDE, Unity, and Mate. Linux also supports multiple users and multitasking, and is compatible with most hardware and software. [Linux is community-driven and has a large and active user base](https://www.coursera.org/articles/unix-vs-linux)\n\n# Nix\nNix is a relatively new operating system that was developed in 2003 by Eelco Dolstra. It is based on the Nix package manager, which allows for reproducible and reliable software installations and configurations. Nix is also a free and open-source operating system, and can run on top of other operating systems such as Linux, MacOS, and Windows. Nix has a unique approach to managing system state, using functional programming concepts and immutable data structures. [Nix aims to provide a high-performance, secure, and portable operating system](https://www.softwaretestinghelp.com/unix-vs-linux/)[4](https://www.softwaretestinghelp.com/unix-vs-linux/) .\n\n# Linux\n- System calls run in kernel mode on the user's behalf and are provided by the kernel itself \n- A library function calls one or more system calls and these system calls execute in supervisor mode since they are part of the kernel itself \n- Once the system call completes its task, it returns and execution is transferred back to user mode \n- The user space application is typically blocked until the library function and system call return (just like a function call)\n- System calls may interact with the kernel proper or with specific drivers and frameworks for the kernel\n## Device drivers\n- Linux Device model \n\t- Built around the concept of busses, devices and drivers\n\t- All devices are connected to a bus of some kind\n\t- A bus can be software, not just physical \n\t- Busses primarily exist to gather similar devices together and coordinate initialization, shutdown and power management \n\t- When a device in the system is found to match a driver, they are bound together. How they are matched depend on the bus.\n- Device Types\n\t- Network devices\n\t- Block devices \n\t\t- Provide userspace apps access to raw storage devices (hardrives, USB)\n\t\t- Visible to applications in /dev\n\t- Character Devices \n\t\t- Provide userspace apps access to all other devices I/O\n\t\t- Visible to apps in /dev\n\t- MTD devices \n\t\t- Flash memory is a unique device type that has translations to allow them to be used as block and character devices \n- Kernel Frameworks \n\t- Device drivers are not directly implemented as character or block devices. They are implemented under a framework to a specific device type (framebuffer, V4L, serial etc..)\n\t- The framework factors out the common parts of drivers for the same type of devices to reduce code duplication\n\t- From the userspace, many are still seen as normal character devices \n\t- Provides a coherent userspace interface (ioctl numbering and semantics)\n- Kernel Layers \n\t![[Driver Interface Model.png]]\n- Virtual File Systems \n\t- System and kernel information is sent to the userspace in the virtual file system\n\t- This is created dynamically and only exists in memory\n\t- proc\n\t\t- mounted at /proc\n\t\t- Contains operating system related information (Processes, memory management params, etc..)\n\t\t- This is old and became chaotic \n\t- sysfs\n\t\t- mounted at /sys\n\t\t- Contains a representation of the system as a set of devices and buses \n\t\t- Newer and is preferred to add system information\n\t- The kernel exports items to the userspace through sysfs\n\t\t- `/sys/bus/` contains the list of buses\n\t\t- `/sys/devices/` contains the list of devices \n\t\t- `/sys/class/` enumerates devices by class (net, input, block etc..)\n## Kernel Modules\n- Linux is monolithic but also modular \n- The kernel can dynamically load and unload parts of the kernel code. These are called kernel modules \n- Modules allow the kernel capabilities to be extended without modifying the rest of the code or rebooting the kernel \n- A kernel module can be inserted or removed while the kernel is running\n\t- This can be done by a root user or userspace script at boot\n- Modules keep the kernel size to a minimum and flexible \n- Reduces boot time \n- Has full control and privileges once loaded\n#### Module Details\n- Naming convention: \\\u003cfilename\u003e.ko\n- Location: `/lib/modules/\u003ckernel_version\u003e`\n# Kernel\n## Monolithic Kernel \n- Much functionality is in the kernel \n## Micro-kernel \n- More functionality in user mode\n- Much smaller\n\n# X Protocol\n(xorg)\n- Server - The software that manages one display, keyboard, and mouse.\n- Client - A program displaying on the screen and taking input from that keyboard and mouse.\n1. A client send drawing requests and information requests to the server\n2. The server sends back to the client user input, replies to information requests and reports any errors.\n\t- The client can be running on the same machine or on a machine on the network. \n- X is not limited to a single client \n- Both local and network connections can be operated in the same way using the protocol\n\t-This makes the network transparent from both the user's POV and from the application programmer's POV\n- Can be used over any reliable byte stream\n- Window manager - A client that has authority over the layout of windows on a screen. \n\t- Some X protocol features are used only by the window manager to enforce this authority. Otherwise, the window manager is just like any other client. \n- Most clients are programmed in C, some in Lisp\n### Message Types\n- X specifies four types of messages that can be transferred over the network. \n\t- Requests\n\t\t- Generated by the client\n\t\t\t- Contains a wide rage of information including specifications for drawing a line or changing color value in a cell in a colormap, or an inquiry about the current size of a window \n\t\t\t- A protocol request can be any multiple of 4 bytes in length\n\t- Replies\n\t\t- Send from the server to the client \n\t\t\t- Not all requests are answered by replies-only the ones that ask for information.\n\t\t\t- Requests that specify drawing do not generate replies.\n\t\t\t- Requests that inquire about window size to generate replies.\n\t\t\t- 4 bytes in length (minimum of 32 bytes)\n\t- Events \n\t\t- Sent from the server to the client \n\t\t\t- Contains information about device action or side effects of a previous request. \n\t\t\t- Data in these requests is varied because it is a principal method by which clients get information.\n\t\t\t- Stored in 32-byte structure to simplify queuing and handling them. \n\t- Errors\n\t\t- Similar to an event but is handled differently by clients \n\t\t\t- Errors are sent to an error-handling routine. Error messages are the same size as events to simplify handling them. ",
    "lastmodified": "2024-09-24T22:48:35.481047341-04:00",
    "tags": []
  },
  "/technology/Operating-System-Build/": {
    "title": "_index",
    "content": "",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/Operating-System-Build/Bare-Bones-Kernel/": {
    "title": "_index",
    "content": "# Booting the Operating System\n- The bootloader, such as GRUB, used to start/load the operating system.\n- The operating system needs to handle when the bootloader passes control to it. \n- The kernel is passed a very minimal environment where the stack is not yet setup.\n- Because there is no stack yet, we must make sure global variables are set correctly.\n\t- This is done is assembly \n\n# Bootstrap Assembly \n`i686-linux-gnu-as boot.s -o boot.o`\n1. Multiboot header\n\t- This marks the program as a kernel. There is magic here ig\n2.  Define the value of the stack pointer register (esp) - x86 bruv\n\t- The stack on x86 bust be 16-byte aligned according to the System V ABI standard and de-facto extensions. \n\t- The compiler will assume that the stack is properly aligned and if it is not it will cause strange behavior.\n3. Kernel entry point\n\t- \\_Start specifies the entry point to the kernel. Once this is loaded, it won't return because the bootloader has completed it's task and is no longer in memory.\n\t\t\t\t\t- [[Further Reading and Concepts#Kernel Entry Point]]\n\t- At this point the bootloader has loaded into...\n\t\t- 32-bit protected mode as x86\n\t\t- Interrupts are disabled\n\t\t- Paging is disabled\n\t\t- Processor is defined in the multiboot standard \n\t\t- There are no security restrictions, safeguards or debugging\n\t\t\t- **The kernel has absolute and complete power over the machine**\n4. Set stack pointer\n\t-  The processor is not fully initialized yet .. missing:\n\t\t- Floating point instructions \n\t\t- Instruction set extensions\n\t- The point between calling the main kernel and setting up the stack is a good time to initialize these features\n5. Enter the high-level kernel\n\t- The [[Further Reading and Concepts#ABI|ABI]] requires the stack is 16-byte aligned at the time of the call instruction (call kernel_main) and will push the return pointer with the size of 4 bytes.\n6. Loop forever \n\t- If the system doesn't have anything else to do after calling kernel_main, it will infinitely loop. To do that:\n\t\t1. Disable interrupts with cli (clear interrupt enable in eflags). They are already disabled by the bootloader, so this is not needed. Mind that you might later enable interrupts and return from kernel_main (which is sort of nonsensical to do).\n\t\t2. Wait for the next interrupt to arrive with hlt (halt instruction). Since they are disabled, this will lock up the computer.\n\t\t3. Jump to the hlt instruction if it ever wakes up due to a non-maskable interrupt occurring or due to system management mode.\n# The kernel\n- The bootstrap assembly stub sets up the processor so that high level languages like C can be used. \n### Freestanding and Hosted Environments\n- Any programming done in user-space is using a **Hosted Environment**.\n\t- Hosted means that there is a C standard library and other runtime features. \n\t- The alternative is the **Freestanding** version which is what we are using here.\n\t\t- This means there is no C standard library, only what is provided by you.\n\t\t- Some header files are actually not part of the C standard lib but are the compiler. These remain available even in freestanding C source code.\n\t\t\u003e In this case you use \u003cstdbool.h\u003e to get the bool datatype, \u003cstddef.h\u003e to get size_t and NULL, and \u003cstdint.h\u003e to get the intx_t and uintx_t datatypes which are invaluable for operating systems development, where you need to make sure that the variable is of an exact size (if you used a short instead of uint16_t and the size of short changed, your VGA driver here would break!). Additionally you can access the \u003cfloat.h\u003e, \u003ciso646.h\u003e, \u003climits.h\u003e, and \u003cstdarg.h\u003e headers, as they are also freestanding. GCC actually ships a few more headers, but these are special purpose.\n### Writing the kernel\n- This kernel uses the VGA text mode buffer (located at `0xB8000`) as the output device. It sets up a simple driver that remembers the location of the next character in this buffer and provides a primitive for adding a new character. \n- Note: There is no support for line breaks (\\\\n) (and writing that character will show some VGA specific character instead) and no support for scrolling when the screen is filled up. Adding this is your first task. \n\n- **IMPORTANT NOTE:** The VGA text mode (as well as the BIOS) is depreciated on newer machines and UEFI only supports pixel buffers. For forward compatibility you might want to start with that. Ask [GRUB](https://wiki.osdev.org/GRUB \"GRUB\") to set up a framebuffer using appropriate Multiboot flags or call [VESA VBE](https://wiki.osdev.org/Vesa \"Vesa\") yourself. Unlike VGA text mode, a framebuffer has pixels, so you have to draw each glyph yourself. This means you'll need a different `terminal_putchar`, and you'll need a font (bitmap images for each character). All Linux distro ships [PC Screen Fonts](https://wiki.osdev.org/PC_Screen_Font \"PC Screen Font\") that you can use, and the wiki article has a simple putchar() example. Otherwise everything else described here still stands (you have to keep track of the cursor position, implement line breaks and scrolling etc.)\n### Linking the Kernel\nNow, boot.s and kernel.c can be assembled which will produce two object files; Each containing a part of the kernel. To create a full and final kernel you will have to link these object files into the final kernel program which is usable by the bootloader. \n- When developing user-space programs, your toolchain ships with default scripts for linking such programs. However, these are unsuitable for kernel development and you need to provide your own customized linker script.. linker.ld\n- Note: Some tutorials suggest linking with i686-elf-id rather than the compiler.\n\n### Verifying Multiboot\n- Check if GRUB has a valid Multiboot version 1 header. This is the case for this kernel.\n- The Multiboot header is within the first 8 KiB of the actual program file at 4 bytes alignment. \n\t- This can break later if a mistake is made in the boot assembly, linker script or anything else that might go wrong. \n\t- If the header isn't valid, GRUB will give an error that it can't find a Multiboot header when trying to boot. This code fragment will help with diagnosis:\n\t\t- `grub-file --is-x86-multiboot myos.bin`\n\t\t- grub-file is quiet but will exit 0 (successfully) if it is a valid multiboot kernel and exit 1 (unsuccessfully) otherwise. \n\n# Booting the Kernel\n## Building a bootable cdrom image\n- This is done using the program grub-mkrescue\n\t- May need to also install grub utility programs and xorriso (v0.5.6+)\n```\nmenuentry \"myos\" {\n\tmultiboot /boot/myos.bin\n}\n```\nNote that the braces must be placed as shown here. You can now create a bootable image of your operating system by typing these commands:\n\n```\nmkdir -p isodir/boot/grub\ncp myos.bin isodir/boot/myos.bin\ncp grub.cfg isodir/boot/grub/grub.cfg\ngrub-mkrescue -o myos.iso isodir\n``` \n\n- mformat is a part of GNU mtools. Install it using pacman -S mtools.\n\n---\n\n\n# Meaty Skeleton\nhttps://wiki.osdev.org/Meaty_Skeleton\n\n",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/Operating-System-Build/Further-Reading-and-Concepts/": {
    "title": "_index",
    "content": "### Kernel Entry Point\n- (`_Start` in your context)**: The kernel entry point is the specific memory address where the execution of the kernel begins. This address is typically defined in your kernel code, and the bootloader is designed to jump to this address after loading the kernel into memory. Once the control transfers to the kernel, it assumes control of the system's resources and functions.\n- **Bootloader's Task Completion**: After loading the kernel into memory and transferring control to the kernel entry point, the bootloader's task is essentially completed. It has done its job of loading the operating system kernel into memory and initializing the system. At this point, the bootloader doesn't need to stay in memory anymore.\n- **Where Does the Bootloader Go?**: After the kernel takes over, the bootloader doesn't have a specific place it \"goes\" in memory. It simply ceases to execute because the CPU's instruction pointer is now pointing to the kernel's entry point. The bootloader code, which was previously in memory, is effectively overwritten by the kernel code as the kernel is loaded.\n### ABI\n- The Application Binary Interface (ABI) is a set of rules and conventions that dictate how programs interact with a computer's hardware and operating system. It defines things like data type sizes, calling conventions, and system call numbers. In essence, the ABI ensures that software components, like libraries and applications, can work seamlessly together by following a common set of rules regarding function calls, data structures, and system interactions.\n###  VGA Text Mode and BIOS Deprecated\n- Older methods of interacting with the computer's display, like VGA text mode and BIOS, are becoming obsolete on newer machines. These methods are being replaced with more modern techniques.\n    \n### UEFI and Framebuffers\n- UEFI (Unified Extensible Firmware Interface) is the modern replacement for BIOS. It supports pixel buffers, which are essentially areas in memory where you can draw pixels directly on the screen. This is in contrast to the older VGA text mode, which dealt with characters on a grid.\n### Multiboot Flags and VESA VBE\n- When you're working on low-level programming tasks like creating an operating system, you can set up a framebuffer using techniques like Multiboot flags (a protocol used by bootloaders like GRUB) or VESA VBE (VESA Video BIOS Extensions) directly. These methods allow you to initialize a pixel buffer for drawing graphics.\n### Drawing Text in Framebuffer Mode\n- Unlike VGA text mode where characters are predefined, in a framebuffer, you have to draw each character (glyph) yourself. This means you need a font, which is essentially a set of bitmap images for each character. Most Linux distributions provide PC Screen Fonts that you can use. To display text, you'll need functions similar to `terminal_putchar` but adapted for drawing pixels instead of using predefined characters.\n### Implementation Details\n- Even in framebuffer mode, you still need to manage things like the cursor position, handle line breaks, and implement scrolling, just like you would in VGA text mode. These concepts remain the same; it's just the way you interact with the display that has changed.",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/Operating-System-Build/Setup/": {
    "title": "_index",
    "content": "## Using Windows Subsystem for Linux (Debian)\n- Install list\n\t- gcc\n\t- build-essential\n\t- bison \n\t- flex \n\t- libgmp3-dev \n\t- libmpc-dev \n\t- libmpfr-dev \n\t- texinfo\n- Cross-Compiler\n\t- `git clone https://github.com/lordmilko/i686-elf-tools`\n\t- `cd i686-elf-tools`\n\t- `./i686-elf-tools.sh linux`\n## Using Manjaro VM\n- Dependencies\n\t- GCC (existing release you wish to replace), or another system C compiler\n\t- G++ (if building a version of GCC \u003e= 4.8.0), or another system C++ compiler\n\t- Make\n\t- Bison\n\t- Flex\n\t- GMP\n\t- MPFR\n\t- MPC\n- Download gcc and bin-utils to src and make them ",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/Programming/": {
    "title": "_index",
    "content": "\nSome notes and cheatsheets for programming some languages that I have notes on.",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/Programming/Assembly/": {
    "title": "_index",
    "content": "# NASM\nEverything is a pointer* :]\n## Segments \n   1. .data - Initialized data goes here\n   2. .bss - Uninitialized data goes here\n   3. .text - Program code goes here\n## C instructions\n   1. printf(\"Hello %d\", input1);\n\t   1. %d tells the compiler that it will print a decimal and will then read the next argument 'input1'.\n\t   2. **zero out rax before printf if not using floating point values**. 1 in RAX for floating point\n\t   3. %-5d %5d aligns by 5 characters -- I think?\n   2. scanf(\"%d\", \u0026 input1);\n\t   1. %d tells the compiler that it will read in a decimal value and the next argument tells the compiler where to store that data.\n## General notes\n- 2s compliment trick for negative values\n- keep all numbers from right to left until you hit the first 1\n\t- 1010 → 0110\n\t- 0110 → 1010\n\t- 0011 → 1101\n\n - Registers are not guaranteed to be cleared\n - **Initialized data** will start with d (define)  \n\t - Ex. db (byte) dw (word 2-byte) dd (double 4-byte)\n - **Uninitialized data** will start with res (reserve)\n\t - Reserving space in memory, but not assigning a value\n\t - Ex. resb (byte) resw (word 2-byte) resd (double 4-byte)\n - Endian-ness \n\t -  Describes how a value is stored in memory\n\t -  **Big Endian**\n\t\t - Stored the typical way we would think\n\t\t - Example: the double 0x12345678 is stored in memory as 12 34 56 78 \n        - **Little Endian**\n\t        - Stored kinda 'backwards' (Least significant byte first)\n\t        - Example: the double 0x12345678 is stored as 78 56 34 12 \n\t        - Used on Intel and AMD (x86-64) processors \n - Moving data\n\t - Moving signed data: mov 0xFFFF to byte storage\n\t\t - Becomes 0xFF (-1) is the same as 0xFFFF (-1)\n\t\t - movezx  - zero out high bits and move larger to smaller register\n\t\t - movesx  - smaller to larger register\n\t- Remember that a mov is really a copy \n\t- Register/Stack movement\n\t\t- push    rax ; push contents of eax onto the stack\n\t\t- pop      rax ; pop stack top into eax\n\t\t- NOTE: pusha \u0026 popa do not exist in 64-bit NASM\n\t\t- **NOTE: for every push there needs to be a pop**\n\t\t- xchg    bl, bh ; swap contents of bl and bh\n - Arithmetic\n\t - Add/Sub take source and destination\n\t - At least one operand must be a resgister (no memory to memory)\n\t\t - add   rax, rcx    ; RAX = RAX + RCX\n\t\t - add   rcx, 21     ; RCX = RCX + 21\n\t\t - add   rax, \\[rcx]\n\t- Unsigned Multiplication\n\t\t-  mul    \\\u003csource\u003e\n\t\t- Source can be register or memory address \n\t- Division\n\t\t- works similar to mul\n\t\t- div only does unsigned division.\n\t\t- **The remainder**: (modulo) is stored in AH\n\t\t- **NOTE: Always need to clear RDX before dividing (16-bit or larger)**\n\t\t- When clearing.. use:\n\t\t\t- xor    rdx, rdx  \n\t\t\t- mov  rdx, 0\n\t\t\t- An xor operation is faster than mov\n- Comparison\n\t- cmp   src1,     src2\n\t- This sets a compare flag\n\t\t- Unsigned: zero flag (ZF), carry flag (CF) compute src1 - src2, \n\t\t- Signed: zero flag (ZF), overflow flag is (OF), sign flag (SF) compute src1 - src2\n- Set \n\t- setg   ah   ; AH = one of GREATER flag set\n- Logic \n\t- AND, OR, XOR\n\t- TEST\n\t- NOT\n- Control Structures\n\t- Branch instruction\n\t\t- jcc (jump based on some condition code)\n\t\t- jmp (Unconditional, always taken, think goto)\n\t\t\t- Three address modes:\n\t\t\t\t- Short: 128 bytes away  (jmp short \\\u003ctarget\u003e)\n\t\t\t\t- Near: 32K bytes away (jmp \\\u003ctarget\u003e)\n\t\t\t\t- Far: (jmp far \\\u003ctarget\u003e)\n## Chapter 3\n### Bit operations \n- Logical - AND, OR, NOT, XOR, NOR, NAND\n- Shifts - Can multiply or divide by 2 with a shift\n\t- Arithmetic\n\t- Logical\n- Operations\n\t- Bit masking (subnet mask)\n\t- Searching for specific bit sequences in input/data\n\t- Conditional branching (true/false)\n\t- Comparisons \n\t- Faster math\n\t\t- Multiply/Divide, left-shift/right shift\n#### Shifts\n- op    register, imm\n- op    register, cl              (low 8 bits of CX -- ECX, counter register)\n\t- Last bit always shifted out (captured in) to carry flag\n- Logical - shifts bits left/right by amount\n\t- SHL: logical shift left (in zeros)\n\t- SHR: logical shift right (in zeros)\n- Arithmetic\n\t- SAL: arithmetic shift left \n\t\tSame as SHL\n\t- SAR: arithmetic shift right\n\t       1001  \u003c- assumes signed \n\t\t1100  \u003c- shift 1 right and copy the sign bit | last 1 bit sent to CF (carry flag)\n- Rotate\n\t- ROL: rotate left (MSB becomes LSB)\n\t- ROR: rotate right (LSB becomes MSB)\n\t- RCL: rotate left with carry (carry becomes LSB, MSB becomes carry)\n\t- RCR: rotate right with carry (carry becomes MSB, LSB becomes carry)\n- Endian-ness\n\t- bswap ; swap byte order\n\t- set everything to one\n\t\t- xor EAX, EAX\n\t\t- not EAX       - does all the opposite \n### Subprograms\n - Methods, functions, procedure \n - Make sure that the work done in a function call is worth it\n - Sequential execution \n - Branches \n\t - Transfer control to some other instruction or location\n\t - Often done via the jump instruction\n\t\t - jg jz jc\n\t - Unconditional jump\n\t - jmp\n - Call\n\t - Transfer control to a region of code (function, procedure, method, subprogram)\n\t - When a subprogram is done, control returns to the statement that follows the \"call\"\n\t - Promotes code reuse, modularity, improved readability \u0026 understanding, etc\n\t - Before using call, ensure all arguments being sent to the function are in the correct address \n\t - When calling to a method you add parameters to the argument registers... Why? Because that is the standard. \n\t  Call =\n\t\t `push RIP`\n\t\t `mov  RIP, \u003ctarget\u003e`\n - Data is stored on the stack\n - Addressing modes\n\t - Immediate\n\t - register\n\t - direct\n\t - indirect\n\t - Segment registers\n\t\t - mov ax, ss:disp\\[rbx]\n- If you use RBX, R12, R13, R14, R15 in your sub program you must save them via the stack before you start using them and when done, pop them in the order that you pushed them\n\t Enter = \n\t\t `push  RBP`\n\t\t `mov   RBP, RSP`\n\t Leave = \n\t\t `mov   RSP, RBP`\n\t\t `pop   RBP`\n\t Ret = \n\t\t  `pop  RIP`\n### The Stack\n- LIFO last in first out\n- Manipulated with push \u0026 pop\n- Stack grows \"down\" towards the heap\n- Stores Activation Records (ARs) for subprograms \n- Call pushes RIP onto the stack and mov function into RIP\n\t-  Call is similar to a macro where is just does those two things\n- The when you pop the stack it returns the stack pointer to where it was originally and the CPU will move to other things or what it was doing before. \n- **# of pushes and pops need to match**\n####  Calling Conventions \n- When creating functions. Explicitly and IN DETAIL describe the function, all registers and what they are doing. This is essentially your documentation for the function. This helps you and anyone reading your code.\n- Jochen recommends using RBP as the first local var \n\n #### C: Local Variable Addresses \n\t - lea \n  C: Return Values\n  - RDX:RAX\nAny time you call lib C you have to make sure the stack is aligned to 16-bytes\n C: Data types\n\t- Global\n\t- Static\n\t- Automatic\n\t- Register\n\t- Volatile\nYou can change the aggressiveness of program optimization at compile time\n#### Upon call\nCaller \n- must store passed parameters\n- store return address\n- pass control to callee\n    `push   RIP`\n\t`mov   RIP, asm_main`\n\tRIP is also your return address\nCallee \n- Create new activation record on stack\n- Preserve registers\n- Allocate storage for local variables\n#### Upon return\n Callee\n - Release allocated storage\n - Restore preserved registers \n - store any returns values\n - restore AR for caller \n - Get return address \u0026 pass control\n Caller\n - Resume control\n### Loop\n- Decrements the count register (RCX) by 1, then if RCX is not 0 and the ZF flag meets the condition specified it jumps to the target instruction specified by the signed 8-bit relative offset. The size of the count register used depends on the address-size attribute of the LOOPcc instruction\n### Arrays \n- Collection of like data\n- A block of contiguous memory\n- Declaration depends on type of array\n- Arrays defined in .text are stored in the stack. Dynamically allocated arrays reside in the heap\n- Like everything else, **it is all just addresses**\n- GCC wants stack to be 16 byte aligned \n\t- So if you need space for 1 + 2\\*4 +50\\*2 = 109 ...\n\t\t- The real value to subtract from RSP should be 112, not 109 to ensure the stack is 8 byte aligned \n#### Accessing Array Elements \n- Accessing array elements is different for the array layout. In other words, if you create an array of double words you access data as \\[array1] = array1\\[0] \\[array1+1] = array\\[1] but for a word you increment by 2 because you are doing address arithmetic \n#### 2 Dimensional arrays\n- Row major vs Column major\n#### Array/String instructions\n- RSI - Source index register (reading)\n- RDI - Destination index register (writing)\n- lodsb, sw, sd,sq  - load from accumulator \n- stosb, sw, sd,sq  - store into accumulator\n- movsb, sw, sd, sq\n- Repeat instructions\n\t- REP, REPE, REPZ, REPNE, REPNZ\n##### Direction flags\n- CLD - Clear direction flag:\n\t- Index registers get incremented \n- STD - Set direction flag\n\t- Index registers get decremented \n##### Common instructions \n- Bound - Check array bound\n### LEA\n- Load Effective Address (lea)\n- Calculates address for you \n```\nenter  4,0\n;; .... code \nlea    rax, [rbp-4] ; rax = address of local dword\n```\n\n# Structures \n- When creating a struct, the memory allocated for each variable will have unused space to fit for the largest data type. GCC compiles code to by double-word aligned. \n- You can re-define how memory is stored using typedef and aligned()\n### Memory Alignment \n- offsetof(S, b)\n\t- returns offset for element b in struct S \n- Bit fields\n\t- unsigned a : 3      // 3 bit field \n\t- unsigned b : 10    // 10-bit field \n### NASM\n- struct and endstruct \n\t- Define data layout for a struct\n- istruc and iend to instantiate an instance of a struct \n\t- Allocate memory and assign values\n- Make the struct local\n\n### Floating Point\n- IEEE standard 754 \n- Float is 32 bit\n\t- sign bit\n\t- 8 bit exponent \n\t- 23 bit significand  \n- Double is 64 bit\n\t- sign bit \n\t- 11 bit exponent \n\t- 52 bit sgnificand\n- Bias\n\t- Depending on double or float, subtract the bias from some value 0-255 to equal the exponent value\n- Convert the following to IEEE single precision:\n\t-\u003e 0.375\n\t\t1. Convert to binary\n\t\tRepeated multiplication X2\n\t\t\u003e 0.375 * 2 = ==0==.75 \n\t\t\u003e 0.75 * 2   = ==1==.5      \n\t\t\u003e 0.5 * 2     = ==1==.0    \u003c- decimal is 0 so done\n\t\t    \u003e Float Binary value = 0.011\t\n\t\t    \u003e 1.1 * 2 ^-2\n\t \u003e | sign |      exponent       |                                 fraction                                     | \n\t \u003e\t|    0   |   0 1 1 1 1 1 0 1    |  1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  |\n\t \n- Floating Point Arithmetic \n\t- Don't check equivalency in floating point values \n\t- Don't do if (x\\==0)\n\t- Do if (|x| \u003c  upselon)\n- Instructions\n\t-Must use st0-st7 which worlds like a stack\n\t- FLD src    ; load single/double/extended precision number\n\t- FILD src   ; load/conver word/double-word int from meory \n\t- FLD1         ; load 1\n\t- FLDZ        ; load 0\n\n\t- FST dst    ; store single/double precision number\n\t- FSTP dst  ; store single/double/extended precision number then pop st0\n\t- FIST dst    ; convert to int \u0026 store word/double word int number\n\n\t- FXCH  stX  ; swap st0 with stX\n\t- FREE stX    ; Delete register stX (marks it empty, not really empty)\n\n\t - FADD src\n\t - FADDP src\n\n\t- FSUB src\n\t- FSUBR src\n\t- FSUB\n\t- FSUBR  dst, st0  ; dst-=st0  -\u003e  Changes order\n\n### ARM \n- A fraction of the amount of instructions\n- UK Computing company in 1978\n- Targeted portable devices \n- Nokia 6110, first ARM GSM phone (1997)\n- In 2013, ARM was in over 90% of mobile devices sold. \n- Still follows Classical Von Neuman Model \n- All program files define an \"AREA\" instead of a section\n\t- AREA\n\t- MyPROG\n\t- CODE\n\t- READONLY",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/Programming/NASMCheatSheet/": {
    "title": "NASM Cheat Sheet",
    "content": "\n## Arithmetic\n - **Subtraction** \n\tSubtract a value in a register or memory location (second operand) from a register or memory location (first operand) and store the result in the first operand location.\n\t- SUB \u003coperand 1\u003e, \u003coperand 2\u003e\n\t- SUB dest, src \n\t- dest -= src\n- **Addition**\n\tAdd the value in a register or memory location (first operand) and an immediate value or the value in a register or memory location (second operand), and store the result in the first operand location\n\t- ADD dest, src\n\t- dest += src\n- **Multiplication**\n\t- MUL\n\t\tMultiply unsigned value in the specified register or memory location by the value in AL, AX, EAX, or RAX and stores the result in AX, DX:AX, EDX:EAX, or RDX:RAX (depends on operand size). It puts the high-order bits of the product in AH, DX, EDX or RDX.\n\t\t- MUL register\n\t\t\t- mem8 - contents of AL * reg/memLocation and stores result in AX\n\t\t\t- mem64 - contents of RAX * reg/memLocation and stores the result in RDX:RAX (High bits stored in RDX. Low in RAX)\n\t- IMUL - **signed multiplication**- pg.180\n\t\tMultiplies two signed operands. The number of operands determines the form of the instruction\n\t\t- One operand: Specified register * RAX; product stored in RDX:RAX (High bits stored in RDX. Low in RAX)\n\t\t- Two operands: First operand * Second Operand; stored in first operand location\n\t\t- Three operands: Second operand * Third Operand; stored in First operand \n- **Division** \n\t- DIV -  **unsigned divide** - pg.174\n\t\tPerform unsigned division of RDX:RAX by the contents of a 64-bit register or memory location and store the quotient in RAX and the remainder in RDX.\n\t\t- DIV src\n\t\t- RDX:RAX / src \n\t\t- \n--- \n## Rotate\n- RCL\n\t- rotate left with carry\n- ROL\n\t- rotate left without carry\n- RCR\n\t- Rotate right with carry\n- ROR\n\t- Rotate right without carry\n- - - \n## Registers \n### General Purpose Registers\n\n|Registers|   |   |   |   |Description|\n|---|---|---|---|---|---|\n|64-bit|32-bit|16-bit|8 high bits of lower 16 bits|8-bit|\n|RAX|EAX|AX|AH|AL|Accumulator|\n|RBX|EBX|BX|BH|BL|Base|\n|RCX|ECX|CX|CH|CL|Counter|\n|RDX|EDX|DX|DH|DL|Data (commonly extends the A register)|\n|RSI|ESI|SI|-|SIL|Source index for string operations|\n|RDI|EDI|DI|-|DIL|Destination index for string operations|\n|RSP|ESP|SP|-|SPL|Stack Pointer|\n|RBP|EBP|BP|-|BPL|Base Pointer (meant for stack frames)|\n|R8|R8D|R8W|-|R8B|General purpose|\n|R9|R9D|R9W|-|R9B|General purpose|\n|R10|R10D|R10W|-|R10B|General purpose|\n|R11|R11D|R11W|-|R11B|General purpose|\n|R12|R12D|R12W|-|R12B|General purpose|\n|R13|R13D|R13W|-|R13B|General purpose|\n|R14|R14D|R14W|-|R14B|General purpose|\n|R15|R15D|R15W|-|R15B|General purpose|\n\n\n![x86_64-registers-3396821814.png](/x86_64-registers-3396821814.png)\n\n### Register Behavior Across Function Calls\n\n|Registers|RAX|RBX|RCX|RDX|RSI|RDI|RBP|RSP|R8|R9|R10|R11|R12|R13|R14|R15|RIP|\n|---------|---|---|---|---|---|---|---|---|--|--|---|---|---|---|---|---|---|\n|Preserve across function calls|   |YES|   |   |   |   |YES|YES|   |   |   |   |YES|YES|YES|YES|N/A|\n|Function parameter|   |   |4th|3rd|2nd|1st|   |   |5th|6th|   |   |   |   |   |   |N/A|\n|Return register|1st|   |   |2nd|   |   |   |   |   |   |   |   |   |   |   |   |N/A|\n|Kernel|\\#NR|   |   |3rd|2nd|1st|   |   |5th|6th|4th|   |   |   |   |   |N/A\n \n---\n## The Stack\n- LIFO - Last In First Out\n- push\n\t- Automatically increments RSP by 8 bytes\n\t- Has to be a 64 bit register so that the stack is aligned\n- pop\n\t- Automatically decrements RSP by 8 bytes\n\t- Has to be a 64 bit register so that the stack is aligned \n- The stack in intel,amd grows down\n- Use RBP instead of RSP to access values on the stack \n\t- This is because RSP is volatile \n\t\t`mov ax, [RBP - 2]` first word\n\t\t`mov ax,  [RPB - 4]` second word\n## Arrays\n- Array addressing\n\t- size * offset + base\nsigned movsx\n\n## Floating Point\n",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/Virtualization/": {
    "title": "_index",
    "content": "\nHere are some notes and stuff on Virtual machines and containers !\n",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/Virtualization/Docker/": {
    "title": "_index",
    "content": "## Containers \n- A container is a run-able instance of an image. You can create, start, stop, move or delete a container using the Docker API call or CLI. You can connect a container to one or more networks and attach storage to it. \n- A container is relatively well isolated from the host and is customization. (sketchy)\n- So, what's the difference between a container and a VM?\n\t- A container use's the host OS and the image is more of an application or executable, not an operating system. \n## Images \n- These images are composed of layers, each representing a set of file changes. These layers are stacked on top of each other to create the final image. Container runtimes use these images to create and run containers. \n- If you're familiar with `chroot`, think of a container as extended version of `chroot`. The filesystem is simply coming from the image. But, a container adds additional isolation not available when simply using chroot.\n## Usage \n- `sudo docker image ls` - List loaded images\n- `sudo docker image load` - load an image\n- `sudo docker run [image name/id]` - start and image\n- `sudo docker ps -a` - list running containers \n- `sudo docker exec -it [myContainer] sh` - pop a shell\n- `docker run --rm -it \u003cimage_name\u003e /bin/sh` - start an interactive shell of the image\n\n\n# Docker 101\n## Setting up the Application\n- `docker run -d -p 80:80 dockersamples/101-tutorial`\n\t-  `-d` - run the container in detached mode (in the background)\n\t- `-p 80:80` - map port 80 of the host to port 80 in the container\n\t- `dockersamples/101-tutorial` - the image to use\n- Upload application zip files and create the Dockerfile\n- `docker build -t \u003capplication name\u003e .`\n\t- This command used the Dockerfile to build a new container image. You might have noticed that a lot of \"layers\" were downloaded. This is because we instructed the builder that we wanted to start from the `node:10-alpine` image. But, since we didn't have that on our machine, that image needed to be downloaded.\n\t- After that, we copied in our application and used `yarn` to install our application's dependencies. The `CMD` directive specifies the default command to run when starting a container from this image.\n- `docker run -dp 3000:3000 docker-101`\n\t- Remember the `-d` and `-p` flags? We're running the new container in \"detached\" mode (in the background) and creating a mapping between the host's port 3000 to the container's port 3000.\n## Updating the Application\n### Making changes\n- After updating a file in the docker image, run `docker build -t \u003capplication name\u003e .`\n- Use `docker run -dp 3000:3000 docker-101` to start the application again\n\t**WARN ! :** The old container must be stopped and removed before starting again\n### Replacing our Old Container\n- Make sure to shut down the original container\n- Get the container ID\n\t- `docker ps`\n- Stop the container \n\t- `docker stop \u003cthe-container-id\u003e`\n- Remove the container \n\t- `docker rm \u003cthe-container-id\u003e`\n## Sharing the App \n### Docker push\n- Log into docker \n\t- `docker login -u YOUR-USER-NAME`\n- Set the tag \n\t- `docker tag docker-101 YOUR-USER-NAME/101-todo-app`\n- Push the app to Docker \n\t- `docker push dockersamples/101-todo-app` \n- Run the application \n\t- `docker run -dp 3000:3000 YOUR-USER-NAME/101-todo-app`\n## Persistent DB\n- Start a `ubuntu` container that will create a file named `/data.txt` with a random number between 1 and 10000.\n\t- `docker run -d ubuntu bash -c \"shuf -i 1-10000 -n 1 -o /data.txt \u0026\u0026 tail -f /dev/null\"`\n- Validate we can see the output by `exec`'ing into the container. To do so, you need to get the container's ID (use `docker ps` to get it).\n\t- `docker exec \u003ccontainer-id\u003e cat /data.txt`\n### Container Volumes\nWith the previous experiment, we saw that each container is effectively read-only. While containers can create, update, and delete files, those changes are lost when the container is removed and are isolated to that container. With volumes, we can change all of this.\n\n[Volumes](https://docs.docker.com/storage/volumes/) provide the ability to connect specific filesystem paths of the container back to the host machine. If a directory in the container is mounted, changes in that directory are also seen on the host machine. If we mount that same directory across container restarts, we'd see the same files.\n\nThere are two main types of volumes. We will eventually use both, but we will start with **named volumes**.\n\n- Create a volume by using the `docker volume create` command.\n\t- `docker volume create todo-db`\n- Start the todo container, but add the `-v` flag to specify a volume mount. We will use the named volume and mount it to `/etc/todos`, which will capture all files created at the path.\n\t- ` docker run -dp 3000:3000 -v todo-db:/etc/todos docker-101`\n- `docker volume inspect` command.\n\t- Shows where in memory the volume is stored!\n",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/Virtualization/Qemu/": {
    "title": "_index",
    "content": "Works best on Linux; Sucks on Windows\n\n## Set up on Arch Linux\n- Install Qemu\n- Install virt-manager \n- Allocate memory for virtual machine \n- Manage machine with virt-manager \n## Storage allocation qcow2\n- qemu-img create myimage.img mysize\n\t- where myimage.img is the disk image filename and mysize is its size in kilobytes. You can add an `M` suffix to give the size in megabytes and a `G` suffix for gigabytes.\n\t- `qemu-img create -f qcow2 my_image.qcow2 15G`\n\t- `qemu-img convert -f raw -O qcow2 my_image.iso my_image.qcow2`\n\t- `qemu-system-x86_64 -drive file=Windows11.qcow2,index=0,media=disk,if=virtio -drive file=Win11_23H2_English_x64v2.iso,index=2,media=cdrom -drive file=virtio-win-0.1.240.iso,index=3,media=cdrom -m 8G`\n### Windows 11\nNeed the Proper virtual drivers from virtio and tmp2\n\t- yay -S tpm2-tools\n### Networking\n- With ethernet, a bridge can be used. This can also be done with WiFi but it looks like that is not recommended. \n- Not totally sure what i did to fix it. changed a few things at once :(\n## Video\n- Had issues with artifacts in Kali.\n  - I noticed I only had the base package for qemu which might have been missing packages for spice. \n  - Deleted qemu-base and installed qemu-full. Re-setup VM using virtio. now it looks good",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/web-development/": {
    "title": "_index",
    "content": "\n# Hello World!\n\nHere I have some notes and guides for some web development stuff I've done :D",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/web-development/self-hosting/": {
    "title": "_index",
    "content": "This post is a follow along to a Youtube video walk-through that I recorded. We will be setting up a home server to host a web application without opening any ports on my home network. To accomplish this I'll be using a Cloudflare tunnel.\n\n\u003e[!note]\n\u003e The `$` denotes a terminal command. Anything before `$` denotes the current working directory.\n## 0. Prerequisites\n1. Remote Server\n2. Cloudflare Account\n3. Reliable Internet Connection\n\n\u003e[!warning]\n\u003eA little disclaimer: I am not a professional; just a student. Do your own research but this should help you get up and running. For the most part I am just following Cloudflare and other documentation. I highly recommend you read through official documentation as needed. \n## 1. Configure Server\n1. Make sure you have root permissions\n\t1. `sudo -l` should output (ALL : ALL) ALL on the current user.\n2. Add current user to sudo as root\n\t1. `usermod -aG sudo mauzy`\n3. Install OpenSSH\n\t1. `ufw allow OpenSSH`\n\t2. `ufw enable`\n\t3. `ufw status`\n4. Install nginx \n\t1. `sudo ufw allow 'Nginx HTTP'`\n## 2. Add your site to Cloudflare\n1. Register using Cloudflare\n2. If you have an existing domain, click add site \n3. Copy the name servers from Cloudflare to your registrar\n\t- Ensure DNSSEC is disabled before doing this\n\t\n\u003e[!note]\n\u003eDNS Records:\n\u003e This is where you can show everyone on Discord how cool you are by adding your website as a connection.\n\n## 3. Additional Cloudflare settings\n###  Configure DNSSEC\n1. Enable in Cloudflare\n\t1. DNS \u003e Settings\n\t2. Enable DNSSEC\n2. Find walkthrough for your registrar \n3. NameCheap\n\t1. Manage \u003e Advanced DNS \n\t2. Enable DNSSEC\n\t3. Copy values from Cloudflare\n\t4. Save it and wait an hour\n\t\n4. Set SSl/TLS encryption mode to Full(strict)\n\t1. This ensures a secure connection between your origin server and Cloudflare.\n\t2. Cloudflare will validate the SSL certificate on your server. \n\t3. This reduces the chances of man-in-the-middle attacks\n\t\t1. Find it in SSL/TLS \u003e Overview\n\t\t2. Make sure the SSL/TLS recommender is on\n5. Enable Always use Https\n\t1. SSL/TLS \u003e Edge Certificates \n6. Set Authenticated Origin Pulls\n\t1. This ensures only requests from Cloudflare with a valid certificate are accepted by your origin server. It helps to protect against unauthorizes access to your server. \n\t2. SSL/TLS \u003e Origin Server\n## 3. Create a tunnel and download the daemon for your Operating System\n1. Go to your newly added site in Cloudflare\n2. In the access tab, Launch the Zero Trust Platform. They move the location of this all of the time for no reason. \n3. Copy and paste into your server shell\n## 4. Setup Firewall\n1. Download the firewall setup script from my Github page\n```BASH\n~/$ curl https://raw.githubusercontent.com/Mauzy0x/Scripts/main/Cloudflare%20IPtable%20setup.sh \u003e\u003e ipScript.sh\n```\n3. Make the script executable\n```BASH\n~/$ chmod +x ipScript.sh\n```\n5. Run the script\n```BAsh\n~/$ ./ipScript.sh\n```\n\n## 5. Nginx\n1. Set up server block\n\t1. Create a directory for your domain with the `p` flag to create any necessary parent directories \n\t```BASH\n\t\tsudo mkdir -p /var/www/your_domain/html\n\t```\n\t2. Now assign ownership of the directory to the current user\n\t```BASH\n\t\tsudo chown -R $USER:$USER /var/www/your_domain/html\n\t```\n\t3. Ensure permissions are correct with chmod\n\t\t```BASH\n\t\tsudo chmod -R 755 /var/www/your_domain\n\t\t```\n\t\t- This uses octal notation. This recursively ensures the owner has full permissions\n2. Configure Nginx server block\n\t1. `sudo rm /etc/nginx/sites-enabled/default`\n\t2. `sudo nano /etc/nginx/sites-available/your_domain`\n3. Configure nginx configuration file\n```bash\nserver {\n    listen 5552;\n    listen [::]:5552;\n    server_name localhost;\n\n    root /var/www/Mauzy-Site/;\n\n    location / {\n        try_files $uri /html/$uri; # Serve from /html/ if not found\n    }\n\n    location ~* \\.(?:gif|css|js|)$ {\n        try_files $uri =404;\n    }\n\n    location /html/ {\n        index index.html index.htm;\n        try_files $uri $uri/index.html $uri.html =404;\n    }\n    error_page 404 = /404.html;\n}\n```\n3. Allow HTTPS traffic with Nginx Full which allows https and http\n\t1. `sudo ufw allow 'Nginx Full'`\n\t2. `sudo ufw reload`\n4. Test config \n\t1. `sudo nginx -t`\n\t2. `sudo systemctl restart nginx`\n\t\t1. In most cases you can just reload nginx to make changes so that applications don't go down. But in this case, let us restart nginx.\n\t\t\n## 6. Trouble Shooting Connection\n- If for whatever reason something is not working, lets troubleshoot. \n\t1. Let us first make sure we are properly hosting our webpage \n\t\t- `curl localhost:portNo`\n\t\t- If this command does not return your HTML then there is an issue with your NGINX configuration\n\t2. If you get an error where it is 'argo tunnel error' there is an issue where Cloudflare cannot see your service. \n\t\t1. Is your tunnel config pointing to http://localhost:portNo ? \n\t\t- It needs to be http and it needs to be the same port number specified in your Nginx config.",
    "lastmodified": "2024-09-24T22:48:35.491047341-04:00",
    "tags": []
  },
  "/technology/web-development/setting-up-hugo/": {
    "title": "_index",
    "content": "# Setting Up Hugo on Ubuntu LTS server\n\n# Intro\nYou don't need to read this part really :3 Just me blabing.\nI wrote this as I installed and setup Hugo for the first time and documented issues I had along the way. Despite it being documentation for myself, this can also be used as a guide! I decided to use Hugo because I wanted to create a blog section for my website. I tried using Jekyll but I'm not a fan of Ruby. Also, Jekyll and its documentation felt dated compared to Hugo; which is written in Go. Being a fan of Rust I also looked at Zola; However Hugo felt like a better fit. At the end there is an install script.\n- Note: The `$` denotes a terminal command. Anything before `$` denotes the current working directory.\n# Always update \u0026\u0026 upgrade first!\n`~$ sudo apt update \u0026\u0026 sudo apt upgrade -y`\n\n# Install Hugo to Host\n- If you wish do do development on this device, you will want to do the full installation of Hugo on the host for viewing quick updates. Otherwise, the standard version is all you need so you can initialize the Hugo directory for your website.\n`~$ sudo apt install hugo`\n**WARN! :** Apt installs version 0.92.2\n- This is older than the required (at least) v0.112.0 of Hugo. It is annoying how many packages in apt are so old. I had this issue with Jekyll and NodeJS on other projects; creating many headaches. I will consider switching my server to Arch Linux in the future. For now I will remove Hugo and install and build directly from GitHub. \n\n## Remove Hugo\n`~$ sudo apt autoremove hugo`\n\n## Prerequisites\n### Install Go\n1. Download Go\n\t`~$ wget https://go.dev/dl/go1.23.1.linux-amd64.tar.gz`\n- Remove any existing Go installations and expand the archive in `/usr/local/`. Un-taring the archive into an existing `/usr/local/go` tree is known to produce broken Go installations.\n\t`~$ sudo rm -rf /usr/local/go \u0026\u0026 sudo tar -C /usr/local -xzf go1.23.1.linux-amd64.tar.gz`\n2. Add `/usr/local/go/bin/` to the PATH environment variable\n\t`~$ export PATH=$PATH:/usr/local/go/bin`\n3. Verify installation \n\t`~$ go version`\n### Install Dart Sass\n1. Download and expand the Linux-x64.tar release from GitHub\n\t`~$ wget https://github.com/sass/dart-sass/releases/download/1.78.0/dart-sass-1.78.0-linux-x64.tar.gz \u0026\u0026 sudo tar -C /usr/local -xzf dart-sass-1.78.0-linux-x64.tar.gz`\n2. Add `/usr/local/dart-sass` to the PATH environment variable\n\t`~$ export PATH=$PATH:/usr/local/dart-sass`\n3. Verify installation\n\t`~$ sass --version`\n### Clean up!\n`~$ rm go1.23.1.linux-amd64.tar.gz dart-sass-1.78.0-linux-x64.tar.gz`\n\n## Build and install Hugo\n**WARN! :** Change the Hugo build and install directory so that go isn't installed in `~/`\n\n1. Build the extended edition:\n\t`~$ CGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest`\n2. Add the `/go/bin` PATH environment variable. You can move this go directory somewhere else if you wish; Just be sure to correctly configure your environment variables now and in the future. \n\t`~$ export PATH=$PATH:~/go/bin`\n3. Verify installation \n\t`~$ hugo version`\n\n# Option 2: Create a Docker Container (recommended)\n## Install Docker\n## Create Dockerfile\n## Install Hugo (any) on the Host\n# Initialize the website!\n1. Create directory structure in the `quickstart` directory and change into that directory\n\t`~$ hugo new site quickstart`\n\t`~$ cd quickstart`\n2. Initialize a Git repo\n\t`~$ git init`\n3. Set a theme. In this case, 'ananke'\n\t`~$ git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke`\n\t`$ echo \"theme = 'ananke'\" \u003e\u003e hugo.toml`\n4. Start the development server to view the new website\n\t`~$ hugo server`\n\t- When running this there is a warning:\n\t\t- WARN  deprecated: resources.ToCSS was deprecated in Hugo v0.128.0 and will be removed in a future release. Use css.Sass instead.\n\t\t- I will be ignoring this for now\n\t- Yay! We can see something on `http://localhost:1313/` :]\n\t\n# Add Content \n- Add a new page\n\t`~$ hugo new content content/posts/my-first-post.md`\n\t- This creates a new file in that directory \n\t- Link to information about `draft = true` in the my-first-post.md file in regards to draft, future and expired content information:\n\t\t- https://gohugo.io/getting-started/usage/#draft-future-and-expired-content \n\t- Add some markdown to the file and save \n## Development Server\n- Start the development server\n\t`~/hugo-docker/hugo-site$ sudo ~/.go/bin/hugo server -D`\n\t\tor \n\t`~/hugo-docker/hugo-site$ ~/.go/bin/hugo server --buildDrafts`\n\tHugo is not installed for the root user and many files in the site directory are now owned by the current user. To work around this for development, we will just point to the file path of the Hugo binary and run it that way.\n- Starting in development mode will allow you to see updates to your site as you make them and save http://localhost:1313/\n## Live Server\n1. Build the Docker container \n\t`~/hugo-docker$ docker build -t hugo-test .`\n2. Start the container \n\t`~/hugo-docker$ sudo docker run -p 1313:1313 -v $(pwd)/hugo-site:/app hugo-test`\n\t\n# Configure the Site\n# Automated Install Script\n- https://github.com/Mauzy0x00/Scripts/blob/main/installHugo.sh\n# References\n## Hugo\n- Hugo GitHub repository\n\t- https://github.com/gohugoio/hugo?tab=readme-ov-file\n- Hugo Quick Start Guide\n\t- https://gohugo.io/getting-started/quick-start/\n- Hugo Documentation\n\t- https://gohugo.io/documentation/\n- Hugo Themes\n\t- https://themes.gohugo.io/themes\n## GoLang\n- Download and install \n\t- https://go.dev/doc/install\n- How to Write Go Code (I didn't really read much of this)\n\t- https://go.dev/doc/code#Command\n## Sass\n- This is useless\n\t- https://sass-lang.com/install/\n## Music I listened to while doing this\n- ✦ rally house 5.0 ✦ \\[house ⊹ techno ⊹ lofi mix]\n\t- https://www.youtube.com/watch?v=oqXXgf0mbe4",
    "lastmodified": "2024-09-24T21:43:36.721333227-04:00",
    "tags": []
  }
}